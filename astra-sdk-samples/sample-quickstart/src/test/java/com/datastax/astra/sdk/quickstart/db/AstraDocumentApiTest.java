package com.datastax.astra.sdk.quickstart.db;

import com.datastax.astra.sdk.AstraClient;
import com.datastax.astra.sdk.quickstart.AbstractSdkTest;
import io.stargate.sdk.core.domain.Page;
import io.stargate.sdk.doc.CollectionClient;
import io.stargate.sdk.doc.Document;
import io.stargate.sdk.doc.StargateDocumentApiClient;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.util.stream.Collectors;

public class AstraDocumentApiTest extends AbstractSdkTest {

    @BeforeAll
    public static void init() {
        loadRequiredEnvironmentVariables();
    }

    @Test
    public void shouldConnectWithDocument() {

        try (AstraClient astraClient = AstraClient.builder()
                .withToken(ASTRA_DB_APPLICATION_TOKEN)  // credentials are mandatory
                .withDatabaseId(ASTRA_DB_ID)            // identifier of the database
                .withDatabaseRegion(ASTRA_DB_REGION)    // endpoint contains region
                .build()) {

            // Each Api got a dedicated specialized client
            StargateDocumentApiClient apiDoc = astraClient.apiStargateDocument();

            // list namespaces
            System.out.println("- List namespaces  : " +
                    apiDoc.namespaceNames().collect(Collectors.toList()));

            // List Collection in a Keyspace
            System.out.println("- List collections : " +
                    apiDoc.namespace(ASTRA_DB_KEYSPACE).collectionNames().collect(Collectors.toList()));

            // Working with collections
            CollectionClient cc = apiDoc.namespace(ASTRA_DB_KEYSPACE).collection("user");
            if (!cc.exist())
                cc.create();

            // Working with documents

            // Creation => id can be generated by astra
            System.out.println(cc.create(new User("John", "Connor")));
            // Creation => id can also be enforced like here
            cc.document("sara").upsert(new User("Sarah", "Connor"));

            // List Documents
            Page<Document<User>> page1 = cc.findPage(User.class);
            for (Document<User> doc : page1.getResults()) {
                System.out.println("Document " + doc.getDocumentId()
                        + " with user " + doc.getDocument().getFirstname()
                        + " " + doc.getDocument().getLastname());
            }

            /* Go for page 2
            PageableQuery query = PageableQuery.builder().build();
            query.setPageState(page1.getPageState().get());
            Page<Document<String>> page2 = cc.findPage(query);
             */
        }
    }

    public static final class User {
        String firstname;
        String lastname;
        public User() {}
        public User(String firstname, String lastname) {
            this.firstname = firstname;
            this.lastname = lastname;
        }
        public String getFirstname()               { return firstname;              }
        public String getLastname()                { return lastname;               }
        public void setFirstname(String firstname) { this.firstname = firstname;    }
        public void setLastname(String lastname)   { this.lastname = lastname;      }
    }

}



