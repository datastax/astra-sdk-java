package com.datastax.astra.sdk.db;

import com.datastax.astra.sdk.AstraClient;
import io.stargate.sdk.core.domain.Page;
import io.stargate.sdk.doc.CollectionClient;
import io.stargate.sdk.doc.Document;
import io.stargate.sdk.doc.StargateDocumentApiClient;
import io.stargate.sdk.doc.domain.PageableQuery;

import java.util.stream.Collectors;

/**
 * Demonstrating Document API.
 */
public class AstraDocumentApiTest {

    // Authentication
    static String ASTRA_DB_TOKEN = "AstraCS:uZclXTYecCAqPPjiNmkezapR:" +
            "e87d6edb702acd87516e4ef78e0c0e515c32ab2c3529f5a3242688034149a0e4";

    // You need a running database
    static String DB_ID       = "dde308f5-a8b0-474d-afd6-81e5689e3e25";
    static String DB_REGION   = "eu-central-1";
    static String DB_KEYSPACE = "ks_mtg";
    // <---

    /**
     * Sample Code to work with Document API.
     *
     * @param args
     *      no arguments
     */
    public static void main(String[] args) {

        try (AstraClient astraClient = AstraClient.builder()
                .withToken(ASTRA_DB_TOKEN)        // credentials are mandatory
                .withDatabaseId(DB_ID)            // identifier of the database
                .withDatabaseRegion(DB_REGION)    // endpoint contains region
                .build()) {

            // Each Api got a dedicated specialized client
            StargateDocumentApiClient apiDoc = astraClient.apiStargateDocument();

            // list namespaces
            System.out.println("- List namespaces  : " +
                    apiDoc.namespaceNames().collect(Collectors.toList()));

            // List Collection in a Keyspace
            System.out.println("- List collections : " +
                    apiDoc.namespace(DB_KEYSPACE).collectionNames().collect(Collectors.toList()));

            // Working with collections
            CollectionClient cc = apiDoc.namespace(DB_KEYSPACE).collection("user");
            if (!cc.exist()) cc.create();

            // Working with documents

            // Creation => id can be generated by astra
            System.out.println( cc.create(new User("John", "Connor")));
            // Creation => id can also be enforced like here
            cc.document("sara").upsert(new User("Sarah", "Connor"));

            // List Documents
            Page<Document<User>> page1 = cc.findPage(User.class);
            for(Document<User> doc : page1.getResults()) {
                System.out.println("Document " + doc.getDocumentId()
                        + " with user " + doc.getDocument().firstname
                        + " " + doc.getDocument().lastname);
            }

            /* Go for page 2
            PageableQuery query = PageableQuery.builder().build();
            query.setPageState(page1.getPageState().get());
            Page<Document<String>> page2 = cc.findPage(query);
             */

        }
    }

    public static final class User {
        String firstname;
        String lastname;
        public User() {}
        public User(String firstname, String lastname) {
            this.firstname = firstname;
            this.lastname = lastname;
        }
        public String getFirstname()               { return firstname;              }
        public String getLastname()                { return lastname;               }
        public void setFirstname(String firstname) { this.firstname = firstname;    }
        public void setLastname(String lastname)   { this.lastname = lastname;      }
    }
}
